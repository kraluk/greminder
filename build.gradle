buildscript {

    ext {
        springBootVersion = '1.5.2.RELEASE'
    }

    repositories {
        mavenCentral()

        maven { url 'https://plugins.gradle.org/m2/' }
    }

    dependencies {
        classpath group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: "${springBootVersion}"
        classpath group: 'net.ltgt.gradle', name: 'gradle-apt-plugin', version: '0.9'
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'jacoco'

apply plugin: 'org.springframework.boot'
apply plugin: 'net.ltgt.apt'

apply plugin: VersionClassPlugin

jar {
    baseName = 'greminder'
    version = '1.0.0-SNAPSHOT'
}

group = 'com.kraluk.greminder'
project.version = '1.0.0-SNAPSHOT'

sourceCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
    jcenter()

    maven { url 'http://labs.smsapi.com/maven/' }

    mavenLocal()
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

sourceSets {
    integration {
        java.srcDir project.file('src/integration/java')

        resources.srcDir project.file('src/integration/resources')
        resources.srcDir project.sourceSets.test.resources
        resources.srcDir project.sourceSets.main.resources

        compileClasspath = project.sourceSets.main.output +
                project.sourceSets.test.output +
                project.configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}

dependencies {

    // Spring stuff
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'

    // Utils
    compile group: 'io.javaslang', name: 'javaslang', version: '2.0.6'
    compile group: 'com.google.guava', name: 'guava', version: '21.0'
    compile group: 'pl.smsapi', name: 'smsapi-lib', version: '2.3'

    // Google Calendar API
    compile group: 'com.google.api-client', name: 'google-api-client', version: '1.22.0'
    compile group: 'com.google.oauth-client', name: 'google-oauth-client-jetty', version: '1.22.0'
    compile group: 'com.google.apis', name: 'google-api-services-calendar', version: 'v3-rev243-1.22.0'

    // MapStruct
    compile group: 'org.mapstruct', name: 'mapstruct-jdk8', version: '1.2.0.Beta2'
    apt group: 'org.mapstruct', name: 'mapstruct-processor', version: '1.2.0.Beta2'

    // Lombok
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.16.16'
    apt group: 'org.projectlombok', name: 'lombok', version: '1.16.16'

    // Runtime dev tools
    runtime group: 'org.springframework.boot', name: 'spring-boot-devtools'
    runtime group: 'com.squareup', name: 'javapoet', version: '1.8.0'

    // Test stuff
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.7.22'
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.6.2'

}

versionClass {
    version = project.version
    packageName = 'com.kraluk.greminder.util'
}

bootRun {
    systemProperties System.properties
}

test {
    testLogging {
        events 'passed', 'skipped', 'failed'
        exceptionFormat = 'full'
    }
}

project.configurations {
    integration {
        extendsFrom project.configurations.testRuntime
        description = 'Dependencies for integration tests'
        transitive = true
        visible = true
    }
}

tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

task wrapper(type: Wrapper) {
    gradleVersion = '3.5'
}

task integrationTest(type: Test) {
    testClassesDir = project.sourceSets.integration.output.classesDir
    classpath = project.sourceSets.main.output +
            project.sourceSets.test.output +
            project.sourceSets.integration.runtimeClasspath +
            project.configurations.testRuntime +
            project.configurations.integrationRuntime

    testLogging {
        events 'passed', 'skipped', 'failed'
        exceptionFormat = 'full'
    }
}

// ----- Version plugin (to externalize!)

import java.time.LocalDateTime

class VersionClassPlugin implements Plugin<Project> {

    void apply(Project project) {

        project.extensions.add("versionClass", VersionClassConfiguration)

        def javaGenSrc = new File(project.buildDir, "generated-sources")

        def makeVersionClassTask = project.task("makeVersionClass") << {
            def versionInfoPackagePath = "${project.versionClass.packageName}".replace('.', '/')
            def versionClassFile = new File(javaGenSrc, "${versionInfoPackagePath}/Version.java")
            versionClassFile.parentFile.mkdirs()
            versionClassFile.withWriter { content ->
                content.write(

/** Start VersionClass Template */
                        """
package ${project.versionClass.packageName};

/**
 * Version info class provides some build meta informations.
 */
public final class Version {

    public static final String VERSION = "${project.versionClass.version}";

    public static final String NAME = "${project.name}";

    public static final String GROUP = "${project.group}";

    public static final String BUILD_DATE = "${LocalDateTime.now()}";

    private Version() {
    }
}
"""
/** End VersionClass Template */

                )
            }
        }
        // Inputs for the task
        makeVersionClassTask.inputs.property("project.version", project.version)
        makeVersionClassTask.inputs.property("project.name", project.name)
        makeVersionClassTask.inputs.property("project.group", project.group)
        // Outputs of the task
        makeVersionClassTask.outputs.dir javaGenSrc
        // Add the javaGenSrc folder as source set
        project.sourceSets {
            main {
                java {
                    srcDir "${javaGenSrc}"
                }
            }
        }
        // Update the task dependencies
        project.tasks.compileJava.dependsOn("makeVersionClass")
    }

}

class VersionClassConfiguration {
    String version = "undefined"
    String packageName = "undefined"
}